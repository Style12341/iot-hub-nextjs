// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id               String           @id
  role             UserRole         @default(USER)
  Devices          Device[]
  SensorCategories SensorCategory[]
  Tokens           UserTokens[]
  Metric           Metric[]
  View             View[]
  DefaultView      View?            @relation("DefaultView", fields: [defaultViewId], references: [id])
  defaultViewId    String?

  @@unique([defaultViewId])
}

enum Metrics {
  SENSOR_VALUES_PER_MINUTE
}

model Metric {
  name      Metrics
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  timestamp DateTime
  value     Int      @default(0)

  @@id([name, userId, timestamp])
  @@index([timestamp])
}

enum DeviceStatus {
  ONLINE
  OFFLINE
  WAITING
}

model Device {
  id                 String       @id @default(uuid())
  name               String
  User               User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  Sensors            Sensor[]
  Groups             Group[]
  lastValueAt        DateTime?
  status             DeviceStatus @default(WAITING)
  ActiveGroup        Group?       @relation("ActiveGroup", fields: [activeGroupId], references: [id], onDelete: SetNull)
  activeGroupId      String?
  View               View?        @relation(fields: [viewId], references: [id], onDelete: SetNull)
  viewId             String?
  ActiveFirmware     Firmware?    @relation("ActiveFirmware", fields: [activeFirmwareId], references: [id], onDelete: SetNull)
  activeFirmwareId   String?
  AssignedFirmware   Firmware?    @relation("AssignedFirmware", fields: [assignedFirmwareId], references: [id], onDelete: SetNull)
  assignedFirmwareId String?
  Firmwares          Firmware[]   @relation("Firmwares")

  @@unique([activeGroupId])
  @@unique(name: "usersDevices", [name, userId])
  @@unique(name: "activeFirmware", [activeFirmwareId])
  @@unique(name: "assignedFirmware", [assignedFirmwareId])
}

model Firmware {
  id             String   @id @default(uuid())
  description    String // Description of the firmware, e.g., "Firmware for temperature sensor"
  version        String // Firmware version, e.g., "1.0.3"
  embedded       Boolean  @default(false) // Indicates if the firmware was provided by the device (cannot be assigned or downloaded)
  fileUrl        String? // Google Cloud Storage URL
  fileName       String? // Original file name
  fileSizeBytes  Int? // File size in bytes
  contentType    String? // MIME type of the file
  checksum       String? // SHA256 hash of the file for verification
  Device         Device   @relation("Firmwares", fields: [deviceId], references: [id])
  ActiveDevice   Device?  @relation("ActiveFirmware")
  AssignedDevice Device?  @relation("AssignedFirmware")
  deviceId       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([deviceId, version])
}

model View {
  id             String   @id @default(uuid())
  name           String
  User           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  Devices        Device[]
  DefaultForUser User?    @relation("DefaultView")

  @@unique([name, userId])
}

model View {
  id             String   @id @default(uuid())
  name           String
  User           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  Devices        Device[]
  DefaultForUser User?    @relation("DefaultView")

  @@unique([name, userId])
}

model Sensor {
  id          String          @id @default(uuid())
  name        String
  unit        String
  Device      Device          @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  deviceId    String
  GroupSensor GroupSensor[]
  Category    SensorCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId  String?
}

model SensorCategory {
  id     String   @id @default(uuid())
  name   String
  User   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  Sensor Sensor[]

  @@unique(name: "usersSensorCategories", [name, userId])
}

model Group {
  id              String        @id @default(uuid())
  name            String
  Device          Device        @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  deviceId        String
  GroupSensor     GroupSensor[]
  ActiveForDevice Device?       @relation("ActiveGroup")

  @@unique(name: "devicesGroups", [name, deviceId])
}

model GroupSensor {
  id          String        @id @default(uuid())
  Group       Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     String
  Sensor      Sensor        @relation(fields: [sensorId], references: [id], onDelete: Cascade)
  sensorId    String
  active      Boolean       @default(true)
  SensorValue SensorValue[]

  @@unique(name: "groupsSensors", [groupId, sensorId])
}

model SensorValue {
  timestamp     DateTime    @default(now())
  value         Float
  GroupSensor   GroupSensor @relation(fields: [groupSensorId], references: [id], onDelete: Cascade)
  groupSensorId String

  @@id([timestamp, groupSensorId])
}

model UserTokens {
  id        String   @id @default(uuid())
  token     String
  createdAt DateTime @default(now())
  context   String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([token, context])
}
