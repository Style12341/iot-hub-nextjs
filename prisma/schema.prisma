// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id               String           @id
  role             UserRole         @default(USER)
  Devices          Device[]
  SensorCategories SensorCategory[]
}

model Device {
  id      String   @id @default(uuid())
  name    String
  User    User     @relation(fields: [userId], references: [id])
  userId  String
  Sensors Sensor[]
  Groups  Group[]

  @@unique(name: "usersDevices", [name, userId])
}

model Sensor {
  id          String         @id @default(uuid())
  name        String
  unit        String
  Device      Device         @relation(fields: [deviceId], references: [id])
  deviceId    String
  GroupSensor GroupSensor[]
  Category    SensorCategory @relation(fields: [categoryId], references: [id])
  categoryId  String
}

model SensorCategory {
  id     String   @id @default(uuid())
  name   String
  User   User     @relation(fields: [userId], references: [id])
  userId String
  Sensor Sensor[]

  @@unique(name: "usersSensorCategories", [name, userId])
}

model Group {
  id          String        @id @default(uuid())
  name        String
  Device      Device        @relation(fields: [deviceId], references: [id])
  deviceId    String
  GroupSensor GroupSensor[]

  @@unique(name: "devicesGroups", [name, deviceId])
}

model GroupSensor {
  id       String  @id @default(uuid())
  Group    Group   @relation(fields: [groupId], references: [id])
  groupId  String
  Sensor   Sensor  @relation(fields: [sensorId], references: [id])
  sensorId String
  active   Boolean @default(true)

  @@unique(name: "groupsSensors", [groupId, sensorId])
}
